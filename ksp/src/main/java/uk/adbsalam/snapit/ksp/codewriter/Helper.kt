package uk.adbsalam.snapit.ksp.codewriter

import java.io.OutputStream

const val PACKAGE_NAME = "uk.adbsalam.snapit"
const val UNKNOWN_FILE = "UnknownFileName"
const val PAPARAZZI_PACKAGE = "uk.adbsalam.snapit.testing"

/**
 * Annotation type as created
 * @SnapIt(isScreen = true) -> SCREEN
 * @SnapIt(isScreen = false) -> COMPONENT
 */
enum class AnnotationType {
    LIGHT_SCREEN, LIGHT_COMPONENT, DARK_SCREEN, DARK_COMPONENT, DARK_GIF, LIGHT_GIF, NONE
}

/**
 * @param file current file in process, file name will be as Example.kt
 * @param annotation type of annotation being processes
 * i.e @SnapIt(isScreen = true) or @SnapIt(isScreen = false)
 *
 * @return returns file name based on annotation being used,
 * this file name will be used to name the test file
 */
internal fun getFileName(
    file: String,
    annotation: AnnotationType
): String {
    return when (annotation) {
        AnnotationType.LIGHT_SCREEN -> file.replace(".kt", "ScreenTest")
        AnnotationType.LIGHT_COMPONENT -> file.replace(".kt", "ComponentTest")
        AnnotationType.DARK_SCREEN -> file.replace(".kt", "DarkScreenTest")
        AnnotationType.DARK_COMPONENT -> file.replace(".kt", "DarkComponentTest")
        AnnotationType.LIGHT_GIF -> file.replace(".kt", "LightGifTest")
        AnnotationType.DARK_GIF -> file.replace(".kt", "DarkGifTest")
        AnnotationType.NONE -> ""
    }
}

/**
 * @param str string to be written
 * general purpose operator function to add to file
 */
internal operator fun OutputStream.plusAssign(str: String) {
    this.write(str.toByteArray())
}

/**
 * Replace extra code from the file thats not needed
 * Some of this code is generated by kotlin poet but is not needed
 * Thus clean the file for any extra code
 */
internal fun String.replaceExtras(): String {
    return this.replace("package none", "")
        .replace("public ", "")
        .replace(": Unit", "")
        .replace(" import kotlin.Unit\n", "")
}